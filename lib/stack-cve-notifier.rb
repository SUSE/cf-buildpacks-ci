# encoding: utf-8
require_relative 'tracker-client'
require_relative 'slack-client'
require_relative 'cve-tags'
require_relative "git-client"
require_relative "buildpack-cve-history"

class StackCVENotifier < Struct.new(:cves_dir, :stacks_dir)
  def run!(system_name, system_shorthand, notifiers)
    cve_tags = CVETags.new(stacks_dir)
    related_cves = cve_tags.related_cves(system_name)
    unrelated_cves = cve_tags.unrelated_cves(system_name)

    {
      related_cves => "#{system_shorthand}.yml",
      unrelated_cves => "#{system_shorthand}-unrelated.yml"
    }.each do |all_cves, filename|
      next if all_cves.empty?

      past_cves = BuildpackCVEHistory.read_yaml_cves(cves_dir, filename)
      past_cve_titles = past_cves.map { |cve| cve['title'] }

      all_cve_titles = all_cves.map { |cve| cve['title'] }

      new_cve_titles = all_cve_titles - past_cve_titles
      new_cves = all_cves.select { |cve| new_cve_titles.include? cve['title'] }

      labels = filename.include?('unrelated') ? ['not-in-rootfs'] : []
      relation = filename.include?('unrelated') ? 'unrelated' : 'related'
      contents = { category: "stacks-#{relation}", labels: labels}
      notifiers.each { |n| n.notify! new_cves, contents }

      next if new_cves.empty?

      cves_without_release = new_cve_titles.map { |title| {'title' => title, 'stack_release' => 'unreleased' } }

      BuildpackCVEHistory.write_yaml_cves(cves_without_release | past_cves, cves_dir, filename)
    end
  end
end
